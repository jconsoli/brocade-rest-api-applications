#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019, 2020, 2021, 2022, 2023 Jack Consoli.  All rights reserved.
#
# NOT BROADCOM SUPPORTED
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may also obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
:mod:`report` - Creates a report in Excel Workbook format from a brcddb project

* Inputs:
    * -i=<Name of input file generated by capture.py or combine.py>
    * -o=<Name of output (report) file - report.xlsx>
    * -suppress<bool flag> suppress all output except final status code. Useful for batch processing
        Optional

* Outputs:
    * Excel Workbook

Version Control::

    +-----------+---------------+-----------------------------------------------------------------------------------+
    | Version   | Last Edit     | Description                                                                       |
    +===========+===============+===================================================================================+
    | 1.x.x     | 03 Jul 2019   | Experimental                                                                      |
    | 2.x.x     |               |                                                                                   |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.0     | 19 Jul 2020   | Initial Launch                                                                    |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.1     | 02 Sep 2020   | Added ability to customize the report                                             |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.2     | 31 Dec 2020   | Improved help messages.                                                           |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.3     | 09 Jan 2021   | Open log file.                                                                    |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.4     | 13 Feb 2021   | Added automatic .xlsx extension for output file and SFP file is not specified.    |
    |           |               | Added # -*- coding: utf-8 -*-                                                     |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.5     | 14 Aug 2021   | Added zone by target.                                                             |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.6     | 14 Nov 2021   | Improved user feedback messaging                                                  |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.7     | 31 Dec 2021   | Use brcddb.util.file.full_file_name()                                             |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.8     | 28 Apr 2022   | Removed custom pages add and remove.                                              |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.9     | 22 Jun 2022   | Added error message when the folder for the project file does not exist.          |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.1.0     | 01 Jan 2023   | Added shebang line. Added read of best practice tables.                           |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.1.1     | 21 Jan 2023   | Added input string to description so it's added to the report.                    |
    +-----------+---------------+-----------------------------------------------------------------------------------+
"""

__author__ = 'Jack Consoli'
__copyright__ = 'Copyright 2019, 2020, 2021, 2022, 2023 Jack Consoli'
__date__ = '21 Jan 2023'
__license__ = 'Apache License, Version 2.0'
__email__ = 'jack.consoli@broadcom.com'
__maintainer__ = 'Jack Consoli'
__status__ = 'Released'
__version__ = '3.1.1'

import argparse
import brcddb.brcddb_project as brcddb_project
import brcdapi.log as brcdapi_log
import brcdapi.file as brcdapi_file
import brcddb.apps.report as brcddb_report
import brcddb.brcddb_common as brcddb_common
import brcddb.brcddb_bp as brcddb_bp
import brcddb.app_data.alert_tables as al
import brcddb.util.iocp as brcddb_iocp
import brcddb.brcddb_fabric as brcddb_fabric

_DOC_STRING = False  # Should always be False. Prohibits any code execution. Only useful for building documentation
_DEBUG = False   # When True, use _DEBUG_xxx below instead of parameters passed from the command line.
_DEBUG_i = 'Lab_217/capture_217'
_DEBUG_o = 'test/test_report'
_DEBUG_bp = 'bp'
_DEBUG_sup = False
_DEBUG_sfp = 'sfp_rules_r10'
_DEBUG_iocp = None
_DEBUG_log = '_logs'
_DEBUG_nl = False
_DEBUG_c = None


def _custom_report(proj_obj, options):
    """Modified as needed for custom reports. Intended for programmers customizing this script

    :param proj_obj: Project object
    :type proj_obj: brcddb.classes.project.ProjectObj
    :param options: As passed in via the shell
    :type options: str, None
    """
    return


def _get_input():
    """Parses the module load command line

    :return i: Input file name
    :rtype i: str
    :return o: Output file name
    :rtype o: str
    :return sfp: Name of SFP rules file
    :rtype sfp: str, None
    :return iocp: Name of folder containing IOCP files
    :rtype iocp: str, None
    :return c: Custom report parameters passed to _custom_report(). Typically not used.
    :rtype c: str, None
    """
    global _DEBUG, _DEBUG_i, _DEBUG_o, _DEBUG_bp, _DEBUG_sfp, _DEBUG_sup, _DEBUG_iocp, _DEBUG_log, _DEBUG_nl, _DEBUG_c

    if _DEBUG:
        args_i, args_o, args_bp, args_sfp, args_sup, args_iocp, args_log, args_nl, args_c =\
            _DEBUG_i, _DEBUG_o, _DEBUG_bp, _DEBUG_sfp, _DEBUG_sup, _DEBUG_iocp, _DEBUG_log, _DEBUG_nl, _DEBUG_c
    else:
        parser = argparse.ArgumentParser(description='Create a general report in Excel.')
        buf = 'Required. Name of input file generated by capture.py, combine.py, or multi_capture.py. Extension '\
              '".json" is automatically added if no extension present.'
        parser.add_argument('-i', help=buf, required=True)
        parser.add_argument('-o', help='Required. Name of report file. ".xlsx" automatically appended.', required=True)
        buf = 'Optional. Name of the Excel Workbook with best practice rules. ".xlsx" is automatically appended.'
        parser.add_argument('-bp', help=buf, required=False)
        buf = 'Optional. Name of the Excel Workbook with SFP thresholds. This is the same file used as input to '\
              'applications.maps_config. This is useful for checking SFPs against the new recommended MAPS rules '\
              'before implementing them or filling in missing rules. ".xlsx" is automatically appended.'
        parser.add_argument('-sfp', help=buf, required=False)
        buf = 'Optional. For FICON environments only. Name of folder with IOCP files. All files in this folder must '\
              'be IOCP files (build I/O configuration statements from HCD) and must begin with the CEC serial number'\
              ' followed by \'_\'. Leading 0s are not required. Example, for a CEC with serial number '\
              '12345: 12345_M90_iocp.txt'
        parser.add_argument('-iocp', help=buf, required=False)
        buf = 'Optional. Suppress all output to STD_IO except the exit code and argument parsing errors. Useful with '\
              'batch processing where only the exit status code is desired. Messages are still printed to the log file'\
              '. No operands.'
        parser.add_argument('-sup', help=buf, action='store_true', required=False)
        buf = '(Optional) Directory where log file is to be created. Default is to use the current directory. The ' \
              'log file name will always be "Log_xxxx" where xxxx is a time and date stamp.'
        parser.add_argument('-log', help=buf, required=False, )
        buf = '(Optional) No parameters. When set, a log file is not created. The default is to create a log file.'
        parser.add_argument('-nl', help=buf, action='store_true', required=False)
        parser.add_argument('-c', help='(Optional) Custom parameter to be used with _custom_report()', required=False)
        args = parser.parse_args()
        args_i, args_o, args_bp, args_sfp, args_sup, args_iocp, args_log, args_nl, args_c =\
            args.i, args.o, args.bp, args.sfp, args.sup, args.iocp, args.log, args.nl, args.c

    # Set up log file and debug
    if args_sup:
        brcdapi_log.set_suppress_all()
    if not args_nl:
        brcdapi_log.open_log(args_log)

    # User feedback
    ml = ['report.py:            ' + __version__,
          'In file, -i:          ' + args_i,
          'Out file, -o:         ' + args_o,
          'SFP rules file, -sfp: ' + str(args_sfp),
          'Best practice, -bp:   ' + str(args_bp),
          'Custom, -c:           ' + str(args_c)]
    if _DEBUG:
        ml.insert(0, 'WARNING!!! Debug is enabled')

    return brcdapi_file.full_file_name(args_i, '.json'), \
           brcdapi_file.full_file_name(args_o, '.xlsx'), \
           brcdapi_file.full_file_name(args_bp, '.xlsx'), \
           brcdapi_file.full_file_name(args_sfp, '.xlsx'), \
           args_iocp, \
           args_c, \
           ml


def pseudo_main():
    """Basically the main(). Did it this way so it can easily be used as a standalone module or called from another.

    :return: Exit code. See exist codes in brcddb.brcddb_common
    :rtype: int
    """
    global _DEBUG, __version__

    # Get and validate user input
    inf, outf, bp_rules, sfp_rules, iocp, custom_parms, ml = _get_input()
    brcdapi_log.log(ml, echo=True)

    # Get the project object
    try:
        proj_obj = brcddb_project.read_from(inf)
    except FileNotFoundError:
        brcdapi_log.log('Input file, ' + inf + ', not found', echo=True)
        return brcddb_common.EXIT_STATUS_ERROR
    except FileExistsError:
        brcdapi_log.log('Folder in ' + inf + ' does not exist', echo=True)
        return brcddb_common.EXIT_STATUS_ERROR
    if proj_obj is None:
        return brcddb_common.EXIT_STATUS_ERROR
    proj_obj.s_description('\n'.join(ml))

    # Perform all pre-processing (parse IOCPs, build references, ...)
    brcdapi_log.log('Building cross references', echo=True)
    brcddb_project.build_xref(proj_obj)
    brcddb_project.add_custom_search_terms(proj_obj)
    brcdapi_log.log('Performing mainframe checks', echo=True)
    for file in brcdapi_file.read_directory(iocp):
        brcddb_iocp.parse_iocp(proj_obj, iocp + '/' + file)
    brcddb_bp.best_practice(bp_rules, sfp_rules, al.AlertTable.alertTbl, proj_obj)

    # Generate the report
    brcddb_report.report(proj_obj, outf)
    _custom_report(proj_obj, custom_parms)
    return brcddb_common.EXIT_STATUS_ERROR if proj_obj.r_is_any_error() else brcddb_common.EXIT_STATUS_OK


##################################################################
#
#                    Main Entry Point
#
###################################################################

# Read in the project file from which the report is to be created and convert to a project object
# Create project

if _DOC_STRING:
    brcdapi_log.close_log('_DOC_STRING is True. No processing', echo=True)
    exit(0)

_ec = pseudo_main()
brcdapi_log.close_log(['', 'Processing Complete. Exit code: ' + str(_ec)], echo=True)
exit(_ec)
