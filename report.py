# Copyright 2019, 2020, 2021 Jack Consoli.  All rights reserved.
#
# NOT BROADCOM SUPPORTED
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may also obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
:mod:`report` - Creates a report in Excel Workbook format from a brcddb project

* Inputs:
    * -i=<Name of input file generated by capture.py or combine.py>
    * -o=<Name of output (report) file - report.xlsx>
    * -suppress<bool flag> suppress all output except final status code. Useful for batch processing
        Optional

* Outputs:
    * Excel Workbook

Version Control::

    +-----------+---------------+-----------------------------------------------------------------------------------+
    | Version   | Last Edit     | Description                                                                       |
    +===========+===============+===================================================================================+
    | 1.x.x     | 03 Jul 2019   | Experimental                                                                      |
    | 2.x.x     |               |                                                                                   |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.0     | 19 Jul 2020   | Initial Launch                                                                    |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.1     | 02 Sep 2020   | Added ability to customize the report                                             |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.2     | 31 Dec 2020   | Improved help messages.                                                           |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.3     | 09 Jan 2021   | Open log file.                                                                    |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.4     | 13 Feb 2021   | Added automatic .xlsx extension for output file and SFP file is not specified.    |
    |           |               | Added # -*- coding: utf-8 -*-                                                     |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.5     | 14 Aug 2021   | Added zone by target.                                                             |
    +-----------+---------------+-----------------------------------------------------------------------------------+
"""

__author__ = 'Jack Consoli'
__copyright__ = 'Copyright 2019, 2020, 2021 Jack Consoli'
__date__ = '14 Aug 2021'
__license__ = 'Apache License, Version 2.0'
__email__ = 'jack.consoli@broadcom.com'
__maintainer__ = 'Jack Consoli'
__status__ = 'Released'
__version__ = '3.0.5'

import argparse
import brcddb.brcddb_project as brcddb_project
import brcdapi.log as brcdapi_log
import brcddb.apps.report as brcddb_report
import brcddb.brcddb_common as brcddb_common
import brcddb.brcddb_bp as brcddb_bp
import brcddb.app_data.alert_tables as al
import brcddb.brcddb_fabric as brcddb_fabric
import brcddb.report.utils as report_utils
import brcddb.util.file as brcddb_file
import brcddb.util.iocp as brcddb_iocp

_DOC_STRING = False  # Should always be False. Prohibits any code execution. Only useful for building documentation
_DEBUG = False   # When True, use _DEBUG_xxx below instead of parameters passed from the command line.
_DEBUG_i = '08132021/combined'
_DEBUG_o = 'test/test_report'
_DEBUG_sup = False
_DEBUG_sfp = 'sfp_rules_r10_45_Tx_32G_SWL'
_DEBUG_iocp = None
_DEBUG_cr = None  # 'chassis,switch'
_DEBUG_ca = None  # 'port_rnid'  # 'all'
_DEBUG_log = '_logs'
_DEBUG_nl = False
_DEBUG_c = None

_ZONE_CHECK = True  # Normally True. Does a deep dive zoning analysis.


def _custom_report(proj_obj, options):
    """Modified as needed for custom reports

    :param proj_obj: Project object
    :type proj_obj: brcddb.classes.project.ProjectObj
    :param options: As passed in via the shell
    :type options: str, None
    """
    return


def parse_args():
    """Parses the module load command line
    
    :return: file
    :rtype: str
    """
    global _DEBUG, _DEBUG_i, _DEBUG_o, _DEBUG_sfp, _DEBUG_sup, _DEBUG_iocp, _DEBUG_cr, _DEBUG_ca, _DEBUG_log, \
        _DEBUG_nl, _DEBUG_c

    if _DEBUG:
        return _DEBUG_i, _DEBUG_o, _DEBUG_sfp, _DEBUG_sup, _DEBUG_iocp, _DEBUG_cr, _DEBUG_ca, _DEBUG_log, _DEBUG_nl, \
               _DEBUG_c
    parser = argparse.ArgumentParser(description='Create a general report in Excel.')
    buf = 'Required. Name of input file generated by capture.py, combine.py, or multi_capture.py. Extension ".json" is'\
          ' automatically added if no extension present.'
    parser.add_argument('-inf', '-i', help=buf, required=True)
    parser.add_argument('-outf', '-o', help='Required. Name of report file. ".xlsx" automatically appended.',
                        required=True)
    buf = 'Optional. Name of the Excel Workbook with SFP thresholds. This is the same file used as input to '\
          'applications.maps_config. This is useful for checking SFPs against the new recommended MAPS rules before '\
          'implementing them or filling in missing rules.'
    parser.add_argument('-sfp', help=buf, required=False)
    buf = 'Optional. For FICON environments only. Name of folder with IOCP files. All files in this folder must be '\
          'IOCP files (build I/O configuration statements from HCD) and must begin with the CEC serial number followed'\
          'by \'_\'. Leading 0s are not required. Example, for a CEC with serial number 12345: 12345_M90_iocp.txt'
    parser.add_argument('-iocp', help=buf, required=False)
    buf = 'Optional. -cr is processed fist so you can remove all pages and then add just the desired pages. '\
          'Customizes the report output by removing the specified pages from the default pages. Enter help for ' \
          'additional help. Enter all to select all pages. Use a comma, with not spaces, to specify multiple pages.'
    parser.add_argument('-cr', help=buf, required=False)
    parser.add_argument('-ca', help='Similar to cr but used for adding pages.', required=False)
    buf = 'Optional. Suppress all output to STD_IO except the exit code and argument parsing errors. Useful with '\
          'batch processing where only the exit status code is desired. Messages are still printed to the log file'\
          '. No operands.'
    parser.add_argument('-sup', help=buf, action='store_true', required=False)
    buf = '(Optional) Directory where log file is to be created. Default is to use the current directory. The log ' \
          'file name will always be "Log_xxxx" where xxxx is a time and date stamp.'
    parser.add_argument('-log', help=buf, required=False, )
    buf = '(Optional) No parameters. When set, a log file is not created. The default is to create a log file.'
    parser.add_argument('-nl', help=buf, action='store_true', required=False)
    parser.add_argument('-c', help='(Optional) Custom parameter to be used with _custom_report', required=False)
    args = parser.parse_args()
    return args.inf, args.outf, args.sfp, args.sup, args.iocp, args.cr, args.ca, args.log, args.nl, args.c


def psuedo_main():
    """Basically the main(). Did it this way so it can easily be used as a standalone module or called from another.

    :return: Exit code. See exist codes in brcddb.brcddb_common
    :rtype: int
    """
    global _DEBUG, __version__, _ZONE_CHECK

    # Get and validate user input
    inf, outf, sfp_rules, s_flag, iocp, cr, ca, log, nl, custom_parms = parse_args()
    if not nl:
        brcdapi_log.open_log(log)
    cr_list = list() if cr is None else [buf.lower() for buf in cr.split(',')]
    ca_list = list() if ca is None else [buf.lower() for buf in ca.split(',')]
    if s_flag:
        brcdapi_log.set_suppress_all()
    if 'help' in cr_list or 'help' in ca_list:
        brcdapi_log.log(brcddb_report.customize_help(), True)
        return brcddb_common.EXIT_STATUS_OK
    if len(outf) < len('.xlsx') or outf[len(outf)-len('.xlsx'):] != '.xlsx':
        outf += '.xlsx'  # Add the .xlsx extension to the Workbook if it wasn't specified on the command line
    ml = ['WARNING!!! Debug is enabled'] if _DEBUG else list()
    ml.append('report.py version ' + __version__)
    ml.append('In file:  ' + inf)
    ml.append('Out file: ' + outf)
    if sfp_rules is None:
        ml.append('SFP rules file: None')
    else:
        if len(sfp_rules) < len('.xlsx') or sfp_rules[len(sfp_rules)-len('.xlsx'):].lower() != '.xlsx':
            sfp_rules += '.xlsx'  # Add the .xlsx extension to the Workbook if it wasn't specified on the command line
        ml.append('SFP rules file: ' + sfp_rules)
        ml.append('The \'User Warning: Data Validation ...\' can be ignored.')
        brcddb_bp.sfp_rules = report_utils.parse_sfp_file(sfp_rules)
    ml.append('custom_parms:     ' + str(custom_parms))
    brcdapi_log.log(ml, True)

    # Get the project object
    proj_obj = brcddb_project.read_from(inf if '.' in inf else inf + '.json')
    if proj_obj is None:
        return brcddb_common.EXIT_STATUS_ERROR

    # Perform all pre-processing (parse IOCPs, build references, ...)
    brcdapi_log.log('Building cross references', True)
    brcddb_project.build_xref(proj_obj)
    brcddb_project.add_custom_search_terms(proj_obj)
    brcdapi_log.log('Performing mainframe checks', True)
    for file in brcddb_file.read_directory(iocp):
        brcddb_iocp.parse_iocp(proj_obj, iocp + '/' + file)
    brcdapi_log.log('Checking best practices', True)
    brcddb_bp.best_practice(al.AlertTable.alertTbl, proj_obj)
    if _ZONE_CHECK:
        for obj in proj_obj.r_fabric_objects():  # Get a zone analysis on all fabrics
            brcdapi_log.log('Performing zone analysis for fabric ' + brcddb_fabric.best_fab_name(obj), True)
            brcddb_fabric.zone_analysis(obj)

    # Generate the report
    brcddb_report.report(proj_obj, outf, cr_list, ca_list)
    _custom_report(proj_obj, custom_parms)
    return brcddb_common.EXIT_STATUS_ERROR if proj_obj.r_is_any_error() else brcddb_common.EXIT_STATUS_OK


##################################################################
#
#                    Main Entry Point
#
###################################################################

# Read in the project file from which the report is to be created and convert to a project object
# Create project

_ec = brcddb_common.EXIT_STATUS_OK
if _DOC_STRING:
    brcdapi_log.close_log('_DOC_STRING is True. No processing', True)
else:
    _ec = psuedo_main()
    brcdapi_log.close_log(str(_ec), True)
exit(_ec)
