#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019, 2020, 2021 Jack Consoli.  All rights reserved.
#
# NOT BROADCOM SUPPORTED
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may also obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
:mod:`compare_report` - Creates a report in Excel Workbook format with all differences between two content samples

* Inputs:
    * -i=<Name of input file generated by capture.py, combine.py, or multi_capture.py>
    * -o=<Name of output (report) file - report.xlsx>
    * -suppress<bool flag> suppress all output except final status code. Useful for batch processing
        Optional

* Outputs:
    * Excel Workbook

**To Do**

In _action_table[_switch_objs][_maps_group_rules] - _basic_add_to_content() wants to see of dict of dict but
_maps_group_rules is a dict of list. I suspect the bug is actually be in brcddb.util.compare.compare()

Version Control::

    +-----------+---------------+-----------------------------------------------------------------------------------+
    | Version   | Last Edit     | Description                                                                       |
    +===========+===============+===================================================================================+
    | 1.x.x     | 03 Jul 2019   | Experimental                                                                      |
    | 2.x.x     |               |                                                                                   |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.0     | 19 Jul 2020   | Initial Launch                                                                    |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.1     | 01 Nov 2020   | Fixed spelling mistake in help message.                                           |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.2     | 14 Nov 2020   | Fixed case when there are no fabric changes and added additional parameters that  |
    |           |               | were introduced in FOS v9.0.                                                      |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.3     | 29 Nov 2020   | Cleaned up display when ports are moved to a different VF. Skip                   |
    |           |               | average-(receive|transmit)-buffer-usage.                                          |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.4     | 01 Dec 2020   | Filtered out MAPS dashboard and fixed average-(receive|transmit)-frame-size       |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.5     | 09 Jan 2021   | Open log file.                                                                    |
    +-----------+---------------+-----------------------------------------------------------------------------------+
    | 3.0.6     | 13 Feb 2021   | Added # -*- coding: utf-8 -*-                                                     |
    +-----------+---------------+-----------------------------------------------------------------------------------+
"""

__author__ = 'Jack Consoli'
__copyright__ = 'Copyright 2019, 2020, 2021 Jack Consoli'
__date__ = '13 Feb 2021'
__license__ = 'Apache License, Version 2.0'
__email__ = 'jack.consoli@broadcom.com'
__maintainer__ = 'Jack Consoli'
__status__ = 'Released'
__version__ = '3.0.6'

import argparse
import brcddb.util.file as brcddb_file
import brcddb.brcddb_fabric as brcddb_fabric
import brcddb.brcddb_switch as brcddb_switch
import brcddb.brcddb_chassis as brcddb_chassis
import brcddb.util.compare as brcddb_compare
import brcddb.brcddb_project as brcddb_project
import brcdapi.log as brcdapi_log
import brcddb.brcddb_common as brcddb_common
import brcddb.report.utils as report_utils
import brcddb.app_data.report_tables as brcddb_rt

_DOC_STRING = False  # Should always be False. Prohibits any code execution. Only useful for building documentation
_DEBUG = True   # When True, use _DEBUG_xxx below instead of parameters passed from the command line.
_DEBUG_BF = '../Tools/rene/DL21KOS126_copy_moderate_policy.json'
_DEBUG_CF = '../Tools/rene/DL21KOS126_moderate_v4_X7.json'
_DEBUG_OUTF = '../Tools/rene/rene_compare_report.xlsx'
_DEBUG_RF = None  # JSON dump from previous write. Speeds up debug. Set to None for normal operation.
_DEBUG_WF = None  # See notes with _DEBUG_RF, 'test_compare_obj.txt'
_DEBUG_SUP = False
_DEBUG_LOG = '_logs'
_DEBUG_NL = False

_key_conv_tbl = dict()  # List of API keys converted to human readable format for report display
_generic_table_add = (  # Key to add to _key_conv_tbl that are simple key/values in brcddb.app_data.report_tables
    brcddb_rt.Chassis.chassis_display_tbl,
    brcddb_rt.Switch.switch_display_tbl,
    brcddb_rt.Chassis.chassis_display_tbl,
    brcddb_rt.Security.security_display_tbl,
    brcddb_rt.Zone.zone_display_tbl,
)

"""We don't want to clutter the report with expected changes such as time-awake, or minor changes such as a few uW
difference in Tx power. The keys in these tables are used as a RegEx search. Keys in dict() are as follows:
+-------|-----------------------------------------------------------------------------------------------------------|
| Key   | Description                                                                                               |
+=======+===========================================================================================================|
| skip  | True - do not perform any checking on matching keys.                                                      |
+-------|-----------------------------------------------------------------------------------------------------------|
| lt    | Only used for numeric comparisons. The item is marked as changed if the compare object + this value is    |
|       | less  than the base value.                                                                                |
+-------|-----------------------------------------------------------------------------------------------------------|
| gt    | Same as lt except compare object + this value is greater than the base value.                             |
+-------|-----------------------------------------------------------------------------------------------------------|
"""
_control_tables = {
    'ProjectObj': {
        '/_(obj_key|alerts)': dict(skip=True),
    },
    'ChassisObj': {
        '/_(obj_key|project_obj|alerts)': dict(skip=True),
        '/brocade-chassis/chassis/date': dict(skip=True),
        '/brocade-fru/fan/speed': dict(lt=500, gt=500),
        '/brocade-fru/fan/time-(awake|alive)': dict(skip=True),
        '/brocade-fru/power-supply/time-(awake|alive)': dict(skip=True),
        '/brocade-fru/power-supply/temperature': dict(lt=5, gt=5),
        '/brocade-fru/power-supply/power-usage': dict(lt=50, gt=50),
        '/brocade-fru/power-supply/input-voltage': dict(lt=10, gt=10),
        '/brocade-fru/blade/power-usage': dict(lt=10, gt=10),
        '/brocade-fru/blade/time-(alive|awake)': dict(skip=True),
        '/brocade-fru/sensor/temperature': dict(lt=5, gt=5),
        '/brocade-fru/wwn/time-(alive|awake)': dict(skip=True),
        '/brocade-fru/wwn/time-alive/time-awake': dict(skip=True),
    },
    'FabricObj': {
        '/_(obj_key|project_obj|alerts|base_logins|port_map)': dict(skip=True),
    },
    'LoginObj': {
        '/_(obj_key|project_obj|alerts)': dict(skip=True),
    },
    'FdmiNodeObj': {
        '/_(obj_key|project_obj|alerts)': dict(skip=True),
    },
    'FdmiPortObj': {
        '/_(obj_key|project_obj|alerts)': dict(skip=True),
    },
    'ZoneCfgObj': {
        '/_(obj_key|project_obj|alerts)': dict(skip=True),
        '/brocade-zone/(.*)': dict(skip=True),  # Everything in brocade-zone is already in the object
    },
    'ZoneObj': {
        '/_(obj_key|project_obj|alerts)': dict(skip=True),
    },
    'AliasObj': {
        '/_(obj_key|project_obj|alerts)': dict(skip=True),
    },
    'SwitchObj': {
        '/_(obj_key|project_obj|alerts)': dict(skip=True),
        'brocade-fibrechannel-logical-switch/fibrechannel-logical-switch/(port|ge-port)-member-list/port-member':
            dict(skip=True),
        '/brocade-fibrechannel-switch/fibrechannel-switch/up-time': dict(skip=True),
        '/brocade-fibrechannel-switch/fibrechannel-switch/enabled-state': dict(skip=True),  # Deprecated
        '/brocade-fabric/fabric-switch/fcid': dict(skip=True),  # Deprecated
        '/brocade-maps/dashboard-rule': dict(skip=True),
        '/brocade-maps/dashboard-rule/category': dict(skip=True),  # See above line. I should never get here
        '/brocade-maps/dashboard-rule/name': dict(skip=True),  # See comment above.
        '/brocade-maps/dashboard-history': dict(skip=True),
        '/brocade-fibrechannel-trunk/performance/tx-percentage': dict(skip=True),
        '/brocade-fibrechannel-trunk/performance/tx-throughput': dict(skip=True),
        '/brocade-fibrechannel-trunk/performance/rx-throughput': dict(skip=True),
        '/brocade-fibrechannel-trunk/performance/rx-throughput/txrx-throughput': dict(skip=True),
        '/brocade-fibrechannel-trunk/performance/txrx-throughput': dict(skip=True),
        '/brocade-fibrechannel-trunk/performance/txrx-percentage': dict(skip=True),
        '/brocade-fibrechannel-trunk/performance/rx-percentage': dict(skip=True),
        '/brocade-fibrechannel-trunk/performance/rx-percentage/txrx-percentage': dict(skip=True),
        '/brocade-maps/dashboard-rule/objects/object': dict(skip=True),
        '/brocade-maps/dashboard-rule/objects/repetition-count': dict(skip=True),
        '/brocade-maps/dashboard-rule/objects/time-stamp': dict(skip=True),
        '/brocade-maps/dashboard-rule/objects/triggered-count': dict(skip=True),
        'brocade-maps/group/members/member': dict(skip=True),
        'brocade-maps/system-resources/cpu-usage': dict(skip=True),
        'brocade-logging/raslog/(current|default)-severity': dict(skip=True),
        'brocade-logging/raslog/current-severity/default-severity': dict(skip=True),
        'brocade-logging/raslog/message-id': dict(skip=True),
    },
    'PortObj': {
        '/_(obj_key|project_obj|alerts|sfp_thresholds|maps_fc_port_group)': dict(skip=True),
        '/fibrechannel/fcid': dict(skip=True),  # Deprecated
        '/fibrechannel/enabled-state': dict(skip=True),  # Deprecated
        '/fibrechannel/average-(receive|transmit)-frame-size': dict(skip=True),
        '/fibrechannel/average-(receive|transmit)-buffer-usage': dict(skip=True),
        '/fibrechannel-statistics/(time-generated|class-3-frames)': dict(skip=True),
        '/fibrechannel-statistics/(in|out)-(rate|octets|frames)': dict(skip=True),
        '/fibrechannel-statistics/(in|out)-(frame|max-frame|peak)-rate': dict(skip=True),
        '/fibrechannel-statistics/frames-processing-required': dict(skip=True),  # What is this?
        '/media-rdp/temperature': dict(lt=5, gt=5),
        '/media-rdp/current': dict(lt=0.2, gt=0.2),
        '/media-rdp/(r|t)x-power': dict(lt=10, gt=10),
        '/media-rdp/voltage': dict(lt=20, gt=20),
        '/media-rdp/power-on-time': dict(skip=True),
        '/media-rdp/remote-media-temperature': dict(lt=5, gt=5),
        '/media-rdp/remote-media-current': dict(lt=0.2, gt=0.2),
        '/media-rdp/remote-media-(r|t)x-power': dict(lt=20, gt=20),
        '/media-rdp/remote-media-voltage': dict(lt=20, gt=20),
        '/media-rdp/remote-media-(voltage|temperature|tx-bias|tx-power|rx-power)-alert/(high|low)-(warning|alarm)':
            dict(skip=True),  # These remote media values aren't always valid
    },
    'AlertObj': {
        '/msg_tbl': dict(skip=True),
    },
}

_column_names = {
    '_flags': 'Flag',
    '_port_objs': 'FC Port',
    '_ge_port_objs': 'GE Port',
    '_maps_rules': 'MAPS Rule',
    '_maps_group_rules': 'MAPS Group Rule',
    '_maps_groups': 'MAPS Group',
    '_login_objs': 'Login',
    '_zonecfg_objs': 'Zone Configuration',
    '_alias_objs': 'Alias',
    '_zone_objs': 'Zone',
    '_eff_zone_objs': 'Effective Zone Member',
    '_fdmi_node_objs': 'FDMI Node',
    '_fdmi_port_objs': 'FDMI Port',
    '_fabric_objs': 'Fabric'
}


def _format_disp(fk, obj):
    """Converts API keys to human readable format

    :param fk: List of keys to convert
    :type obj: list
    :param obj: Change object
    :type obj: dict
    :return: List of keys in human readable format for report
    :type: list
    """
    # I have no idea what I was thinking when I did this. It works but it's ugly

    global _key_conv_tbl

    b = obj.get('b')
    c = obj.get('c')
    tfk = fk.copy()
    if len(tfk) == 2 and tfk[0] == '_port_objs':
        key = 'Port'
        b = obj.get('b')
        c = obj.get('c')
    elif len(tfk) > 2 and tfk[0] == '_port_objs':
        tfk[1] = 's/p'
        key = '/'.join(tfk)
        if key in _key_conv_tbl:
            key = 'Port ' + fk[1] + ' ' + _key_conv_tbl[key]
        else:
            key = 'Port ' + fk[1] + '/' + fk[2] + ' ' + '/'.join(tfk[3:])
        try:
            b = str(brcddb_common.port_conversion_tbl[tfk[3]][int(b)])
            c = str(brcddb_common.port_conversion_tbl[tfk[3]][int(c)])
        except:
            try:
                b = str(brcddb_common.port_conversion_tbl[tfk[3]][b])
                c = str(brcddb_common.port_conversion_tbl[tfk[3]][c])
            except:
                b = obj.get('b')
                c = obj.get('c')
    elif len(tfk) > 2 and tfk[0] == 'brocade-fibrechannel-switch' and tfk[1] == 'fibrechannel-switch':
        key = '/'.join(tfk)
        try:
            b = str(brcddb_common.switch_conversion_tbl[key][int(b)])
            c = str(brcddb_common.switch_conversion_tbl[key][int(c)])
        except:
            b = obj.get('b')
            c = obj.get('c')
        if key in _key_conv_tbl:
            key = _key_conv_tbl[key]
    else:
        key = '/'.join(tfk)
        if isinstance(key, str) and key in _key_conv_tbl:
            key = _key_conv_tbl[key]

    return [key, b, c, obj.get('r')]


def _content_append(obj, content):
    """Checks to makes sure we're not adding null content

    :param obj: Object to add
    :type obj: dict
    :param content: List of report content where obj is to be added
    :type content: list
    """
    dl = obj.get('disp')
    if dl is not None and len(dl) == 4:
        if dl[1] is not None and dl[2] is not None:
            content.append(obj)
    else:
        content.append(obj)


def _fabric_name(p_obj, wwn, flag=True):
    return brcddb_fabric.best_fab_name(p_obj.r_fabric_obj(wwn), flag)


def _chassis_name(p_obj, wwn, flag=True):
    return brcddb_chassis.best_chassis_name(p_obj.r_chassis_obj(wwn), flag)


def _switch_name(p_obj, wwn, flag=True):
    return brcddb_switch.best_switch_name(p_obj.r_switch_obj(wwn), flag)


def _basic_add_to_content(obj, b_obj, c_obj, content):
    """Parses a dictionary returned from brcddb.util.compare.compare

    :param obj: Fabric object to parse
    :type obj: dict
    :param b_obj: Base project object. Not used
    :type b_obj: brcddb.classes.project.*Obj
    :param c_obj: Compare project object. Not used
    :type c_obj: brcddb.classes.project.*Obj
    :param content: List of report content where objects in obj are to be added
    :type content: list
    """
    start = len(content)
    if obj is not None:
        for k, v in obj.items():
            _content_append({'font': 'std', 'align': 'wrap', 'disp': ('', v.get('b'), v.get('c'), v.get('r'))}, content)
    if len(content) == start:
        content.append({'merge': 4, 'font': 'std', 'align': 'wrap', 'disp': ('No changes')})


def _alias_add_to_content(obj, b_obj, c_obj, content):
    """Same as _basic_add_to_content() but assumes the data are WWNs and converts them to aliases"""
    start = len(content)
    if obj is not None:
        for k, v in obj.items():
            b_buf = v.get('b')
            alias = b_obj.r_alias_for_wwn(b_buf)
            if len(alias) > 0:
                b_buf = alias[0] + ' (' + b_buf + ')'
            c_buf = v.get('c')
            alias = c_obj.r_alias_for_wwn(c_buf)
            if len(alias) > 0:
                c_buf = alias[0] + ' (' + c_buf + ')'
            _content_append({'font': 'std', 'align': 'wrap', 'disp': ('', b_buf, c_buf, v.get('r'))}, content)
    if len(content) == start:
        content.append({'merge': 4, 'font': 'std', 'align': 'wrap', 'disp': ('No changes')})


def _switch_add_to_content(obj, b_obj, c_obj, content):
    """Same as _basic_add_to_content() except obj is a list of switch change objects"""
    start = len(content)
    for change_obj in [t_obj for t_obj in obj if t_obj.get('r') is not None]:
        b_buf = brcddb_switch.best_switch_name(b_obj.r_project_obj().r_switch_obj(change_obj.get('b')), True)
        c_buf = brcddb_switch.best_switch_name(c_obj.r_project_obj().r_switch_obj(change_obj.get('c')), True)
        _content_append({'font': 'std', 'align': 'wrap', 'disp': ('', b_buf, c_buf, change_obj.get('r'))}, content)
    if len(content) == start:
        content.append({'merge': 4, 'font': 'std', 'align': 'wrap', 'disp': ('No changes')})


def _fabric_add_to_content(obj, b_obj, c_obj, content):
    """Same as _basic_add_to_content() but assumes the data are WWNs and converts them to fabric names"""
    start = len(content)
    if obj is not None:
        proj_obj = obj.r_project_obj()
        for k, v in obj.items():
            b_buf = brcddb_fabric.best_fab_name(proj_obj.r_fabric_obj(v.get('b')), True)
            c_buf = brcddb_fabric.best_fab_name(proj_obj.r_fabric_obj(v.get('c')), True)
            _content_append({'font': 'std', 'align': 'wrap', 'disp': ('', b_buf, c_buf, v.get('r'))}, content)
    if len(content) == start:
        content.append({'merge': 4, 'font': 'std', 'align': 'wrap', 'disp': ('No changes')})


def _null(obj, b_obj, c_obj, content):
    """Used for development before comparisons are complete for an item"""
    return


_action_table = {
    '_fabric_objs': {
        '_alias_objs': {'t': 'Aliases', 'f': _basic_add_to_content},
        '_eff_zone_objs': {'t': 'Zones in effective zones configuration', 'f': _basic_add_to_content},
        '_fdmi_node_objs': {'t': 'FDMI Nodes', 'f': _alias_add_to_content},
        '_fdmi_port_objs': {'t': 'FDMI Ports', 'f': _alias_add_to_content},
        '_login_objs': {'t': 'Name server logins', 'f': _alias_add_to_content},
        '_switch_keys': {'t': 'Switches in fabric', 'f': _switch_add_to_content},
        '_zone_objs': {'t': 'Zones', 'f': _basic_add_to_content},
        '_zonecfg_objs': {'t': 'Zone configurations', 'f': _basic_add_to_content},
    },
    '_chassis_objs': {
        '_switch_keys': {'t': 'Switches in fabric', 'f': _switch_add_to_content},
    },
    '_switch_objs': {
        '_fabric_key': {'t': 'Member of Fabric', 'f': _fabric_add_to_content},
        '_maps_rules': {'t': 'MAPS Rules', 'f': _basic_add_to_content},
        # '_maps_group_rules': {'t': 'MAPS Group Rules', 'f': _basic_add_to_content},
        '_maps_group_rules': {'t': 'MAPS Group Rules', 'f': _null},
        '_maps_groups': {'t': 'MAPS Groups', 'f': _basic_add_to_content},
    },
}


def _api_added_compares(obj, k, fk, content):
    """Recursively iterates through a list of changes from compare.compare() for API added content

    :param obj: Added API content
    :type obj: dict
    :param k: Active key
    :type k: str
    :param fk: List of keys
    :type fk: list
    :param content: Running list of changes to add to report
    :type content: list
    """
    if isinstance(obj, dict):
        t_obj = obj.get(k)
        if isinstance(t_obj, dict):
            fk.append(k)
            for k1 in t_obj.keys():
                tfk = fk.copy()
                _api_added_compares(t_obj, k1, fk, content)
                fk = tfk
        elif isinstance(t_obj, (list, tuple)):
            _api_added_compares(t_obj, k, fk, content)
        elif isinstance(t_obj, (str, int, float)):
            if k == 'b':
                _content_append({'font': 'std', 'align': 'wrap', 'disp': _format_disp(fk, obj)}, content)
            elif k not in ('c', 'r'):
                brcdapi_log.exception('Unknown element: ' + str(t_obj), True)
        else:
            brcdapi_log.exception('Unknown type: ' + str(type(t_obj)), True)

    elif isinstance(obj, (list, tuple)):
        fk.append(k)
        for n_obj in obj:
            tfk = fk.copy()
            if isinstance(n_obj, dict):
                for k1 in n_obj.keys():
                    _api_added_compares(n_obj, k1, fk, content)
            fk = tfk

    else:
        brcdapi_log.exception('Unknown type: ' + str(type(obj)), True)


def _page(wb, sheet_index, b_proj_obj, c_proj_obj, c_obj, page):
    """Recursively iterates through a list of changes from compare.compare() for fabric. Create fabric pages as needed

    :param wb: Workbook object
    :type wb: dict
    :param sheet_index: Starting sheet index
    :type sheet_index: int
    :param b_proj_obj: Project object for base (project we are comparing against). Typically the older project.
    :type b_proj_obj: brcddb.classes.project.ProjectObj
    :param c_proj_obj: Comparison project object. Typically the newer project.
    :type c_proj_obj: brcddb.classes.project.ProjectObj
    :param c_obj: This is the object from compare.compare() that we are working on
    :type c_obj: dict
    :param page: Page type: _fabric_objs, _chassis_objs, or _switch_objs
    :type page: str
    :return sheet_index: Next sheet index
    :rtype sheet_index: int
    :return tbl_contents: Table of contents for the fabrics
    :rtype. tbl_contents: list
    """
    # Set up the table of contents and sheet headers
    tbl_contents = list()
    if not isinstance(c_obj, dict):
        return sheet_index, tbl_contents  # This happens when there are no changes
    for base_key, f_obj in c_obj.items():
        b_fab_obj = b_proj_obj.r_fabric_obj(base_key)
        c_fab_obj = c_proj_obj.r_fabric_obj(base_key)
        t_content = [{'font': 'hdr_2', 'align': 'wrap', 'disp': ('Key', 'Base Value', 'Compare Value', 'Change')}]
        obj_tbl = _action_table[page]

        # Add each individual item for the brcddb object to the sheet
        if b_fab_obj is not None and c_fab_obj is not None:  # The principal fabric switch may not have been polled
            for k, cntl_tbl in obj_tbl.items():
                obj = f_obj.get(k)
                if obj is not None:
                    # obj can be None if code was upgraded and a new KPI was introduced and captured. This logic skips
                    # reporting on anything new because we have no idea what the previous version would have been
                    t_content.append(dict())
                    t_content.append({'font': 'hdr_2', 'merge': 4, 'align': 'wrap', 'disp': cntl_tbl.get('t')})
                    cntl_tbl.get('f')(obj, b_fab_obj, c_fab_obj, t_content)

        # Add each item added to the brcddb object (these are the items from the API)
        t_content.append(dict())
        t_content.append({'font': 'hdr_2', 'merge': 4, 'align': 'wrap', 'disp': 'Added from RESTConf API'})
        for k1 in [key for key in f_obj.keys() if key not in obj_tbl]:
            _api_added_compares(f_obj, k1, list(), t_content)
        # Sheet name and title
        title, sname = _main_pages[page]['ts'](b_proj_obj, base_key)
        sname = sname.replace(' ', '_').replace(':', '').replace('-', '_')
        sname = sname[:28] + '_' + str(sheet_index) if len(sname) > 28 else sname + '_' + str(sheet_index)
        tbl_contents.append({'s': sname, 'd': title})
        report_utils.title_page(wb, None, sname, sheet_index, title, _main_pages[page]['sc'](t_content),
                                (42, 42, 42, 24))
        sheet_index += 1

    return sheet_index, tbl_contents


# After the fact, I realized I needed to sort the display output. The next 2 methods sort and filter the output
def _sort_switch(content):
    rl = list()
    re = list()
    for obj in content:
        try:
            key = obj.get('disp')[0]
        except:
            key = ''
        if not key.startswith('brocade-maps/group/members'):
            if key.startswith('Port '):
                re.append(obj)
            else:
                rl.append(obj)

    rl.append(dict())
    rl.append({'merge': 4, 'font': 'hdr_2', 'align': 'wrap', 'disp': ('Ports')})
    if len(re) == 0:
        rl.append({'merge': 4, 'font': 'std', 'align': 'wrap', 'disp': ('No changes')})
    else:
        rl.extend(re)
    return rl


def _sort_null(content):
    return content


def _fabric_ts(o, k):
    obj = o.r_fabric_obj(k)
    return brcddb_fabric.best_fab_name(obj, True), brcddb_fabric.best_fab_name(obj, False)


def _chassis_ts(o, k):
    obj = o.r_chassis_obj(k)
    return brcddb_chassis.best_chassis_name(obj, True), brcddb_chassis.best_chassis_name(obj, False)


def _switch_ts(o, k):
    obj = o.r_switch_obj(k)
    return brcddb_switch.best_switch_name(obj, True), brcddb_switch.best_switch_name(obj, False)


_main_pages = {  # 's': sheet name. 't': sheet title. 'n': method to return object name
    '_fabric_objs': {'s': 'F_', 't': 'Fabric Comparisons: ', 'n': _fabric_name, 'sc': _sort_null, 'ts': _fabric_ts},
    '_switch_objs': {'s': 'S_', 't': 'Switch Comparisons: ', 'n': _switch_name, 'sc': _sort_switch, 'ts': _switch_ts},
    '_chassis_objs': {'s': 'C_', 't': 'Chassis Comparisons: ', 'n': _chassis_name, 'sc': _sort_null, 'ts': _chassis_ts},
}


def _login_obj_name(obj, k, wwn):
    try:
        return obj.r_fabric_obj(k).r_alias_for_wwn(wwn)[0] + ' (' + wwn + ')'
    except:
        return wwn


def parse_args():
    """Parses the module load command line
    
    :return b_file: Base file name for comparison. File is in the format output by capture, multi_capture, and combined.
    :rtype b_file: str
    :return c_file: Compare file name. Same format as the base file
    :rtype c_file: str
    :return o_file: Output file name for Excel report.
    :rtype o_file: str
    """
    global _DEBUG_BF, _DEBUG_CF, _DEBUG_OUTF, _DEBUG_SUP, _DEBUG_LOG, _DEBUG_NL

    if _DEBUG:
        return _DEBUG_BF, _DEBUG_CF, _DEBUG_OUTF, _DEBUG_SUP, _DEBUG_LOG, _DEBUG_NL

    parser = argparse.ArgumentParser(description='Create a comparison report in Excel.')
    buf = 'Base project to compare against. Name of input file generated by capture.py or combine.py. Typically ' \
          'the older data.'
    parser.add_argument('-b', help=buf, required=True)
    buf = 'Project to compare against. Name of input file generated by capture.py or combine.py. Typically the ' \
          'newer data.'
    parser.add_argument('-c', help=buf, required=True)
    parser.add_argument('-r', help='Excel comparison report file name. ".xlsx" is automatically appended.',
                        required=True)
    buf = 'suppress all output to STD_IO except the exit code and argument parsing errors. Useful with batch '\
          'processing where only the exit status code is desired. Messages are still printed to the log file.'
    parser.add_argument('-sup', help=buf, action='store_true', required=False)
    buf = '(Optional) Directory where log file is to be created. Default is to use the current directory. The log ' \
          'file name will always be "Log_xxxx" where xxxx is a time and date stamp.'
    parser.add_argument('-log', help=buf, required=False, )
    buf = '(Optional) No parameters. When set, a log file is not created. The default is to create a log file.'
    parser.add_argument('-nl', help=buf, action='store_true', required=False)
    args = parser.parse_args()
    return args.b, args.c, args.r, args.sup, args.log, args.nl


def _new_report(c, b_proj_obj, c_proj_obj, c_obj, r_name):
    """Generates an Excel comparison report

    :param c: Total number of changes
    :type c: int
    :param b_proj_obj: Project object for base (project we are comparing against). Typically the older project.
    :type b_proj_obj: brcddb.classes.project.ProjectObj
    :param c_proj_obj: Comparison project object. Typically the newer project.
    :type c_proj_obj: brcddb.classes.project.ProjectObj
    :param c_obj: Change object returned from brcddb.util.compare.compare()
    :type c_obj: dict
    :param r_name: Name of Excel workbook file
    :type r_name: str
    """
    # Set up the workbook
    sheet_index = 0
    wb = report_utils.new_report()

    # Setup the Project summary sheet with table of content
    title = str(b_proj_obj.get('policyName')) + ' Compared to ' + str(c_proj_obj.get('policyName'))
    tc_page = 'Project_Summary'
    t_content = [
        {'font': 'std', 'align': 'wrap', 'disp': ('Total changes', c)},
        dict(),
        {'font': 'hdr_2', 'align': 'wrap', 'disp': ('Key', 'Base Value', 'Compare Value', 'Change')},
    ]

    # Add any added changes to the project objects
    for k, obj in c_obj.items():
        if k not in _main_pages.keys():
            t_content.append({'font': 'std', 'align': 'wrap',
                              'disp': (k, obj.get('b'), obj.get('c'), obj.get('r'))})

    # Add all the chassis, switch and fabric sheets
    for k, p_obj in _main_pages.items():
        t_content.append(dict())
        t_content.append({'font': 'hdr_2', 'merge': 4, 'align': 'wrap', 'disp': p_obj.get('t')})
        sheet_index, tbl_contents = _page(wb, sheet_index, b_proj_obj, c_proj_obj, c_obj.get(k), k)
        for d in tbl_contents:
            td = {'font': 'link', 'merge': 4, 'align': 'wrap', 'disp': d.get('d')}
            if 's' in d:  # Is there a link to a page?
                td.update({'hyper': '#' + d.get('s') + '!A1'})
                t_content.append(td)

    # Add the project summary with table of contents and save the report.
    report_utils.title_page(wb, None, tc_page, 0, title, t_content, (24, 42, 42, 12))
    report_utils.save_report(wb, r_name)


def pseudo_main():
    """Basically the main(). Did it this way so it can easily be used as a standalone module or called from another.

    :return: Exit code. See exist codes in brcddb.brcddb_common
    :rtype: int
    """
    global _generic_table_add, _key_conv_tbl

    # Get and validate the user inputs.
    bf, cf, rf, s_flag, log, nl = parse_args()
    if s_flag:
        brcdapi_log.set_suppress_all()
    if not nl:
        brcdapi_log.open_log(log)
    if len(rf) < len('.xlsx') or rf[len(rf)-len('.xlsx'):] != '.xlsx':
        rf += '.xlsx'  # Add the .xlsx extension to the Workbook if it wasn't specified on the command line
    ml = ['WARNING!!! Debug is enabled'] if _DEBUG else list()
    ml.append(':START: Compare Report:')
    ml.append('    Base file:    ' + bf)
    ml.append('    Compare file: ' + cf)
    ml.append('    Report file:  ' + rf)
    brcdapi_log.log(ml, True)

    # Read the projects to compare and build the cross references
    ml = list()
    b_proj_obj = brcddb_file.read_dump(bf)[0]
    c_proj_obj = brcddb_file.read_dump(cf)[0]
    if b_proj_obj is None:
        ml.append('Missing or invalid base project.')
    if c_proj_obj is None:
        ml.append('Missing or invalid compare project.')
    if len(ml) > 0:
        brcdapi_log.log(ml, True)
        return brcddb_common.EXIT_STATUS_ERROR

    # Build out the key conversion tables. Used in _format_disp()
    for k, v in brcddb_rt.Port.port_display_tbl.items():
        if k[0] != '_':  # Make sure it's not a custom key
            _key_conv_tbl.update({'_port_objs/s/p/' + k: v.get('d')})
    for k, v in brcddb_rt.Login.login_display_tbl.items():
        if k[0] != '_':  # Make sure it's not a custom key
            _key_conv_tbl.update({k: v.get('d')})
    for table_obj in _generic_table_add:
        for k, v in table_obj.items():
            if k[0] != '_':  # Make sure it's not a custom key
                if isinstance(v, dict):
                    for k1, v1 in v.items():
                        _key_conv_tbl.update({k + '/' + k1: v1})
                else:
                    _key_conv_tbl.update({k: v})

    # Compare the two projects
    brcdapi_log.log('Please wait. The comparison may take several seconds', True)
    if _DEBUG_RF is not None:
        compare_obj = brcddb_file.read_dump(_DEBUG_RF)
        c = 100
    else:
        c, compare_obj = brcddb_compare.compare(b_proj_obj, c_proj_obj, None, _control_tables)
        if _DEBUG_WF is not None:
            brcddb_file.write_dump(compare_obj, _DEBUG_WF)
    _new_report(c, b_proj_obj, c_proj_obj, compare_obj, rf)
    return brcddb_common.EXIT_STATUS_OK


##################################################################
#
#                    Main Entry Point
#
###################################################################
_ec = brcddb_common.EXIT_STATUS_OK
if _DOC_STRING:
    print('_DOC_STRING is True. No processing')
else:
    _ec = pseudo_main()
    brcdapi_log.close_log('\nProcessing Complete. Exit code: ' + str(_ec), True)
exit(_ec)
